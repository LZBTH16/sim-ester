<div class="admin">
    <div class="admin-landing">
        <h1>Welcome {{username}}</h1>
        <p>Continue below for admin statistics</p>
        <p class="navigate"><a href="/listorder">All Orders</a></p>
    </div>

    <div class="container">
        <h2>Sales Graph</h2>
        <div>
            <!-- Buttons for filtering time range -->
            <button class="custom-button" id="filter-3-months">Last 3 Months</button>
            <button class="custom-button" id="filter-1-year">Last Year</button>
            <button class="custom-button" id="filter-all-time">All Time</button>
        </div>
        <table>
            <tbody>
                {{#each orders}}
                <tr>
                    <td>{{this.orderDate}}</td>
                    <td>${{this.sumTotal}}</td>
                </tr>
                {{/each}}
            </tbody>
        </table>

        <div>
            <canvas id="salesReportChart" width="800" height="400"></canvas>
        </div>
    </div>

    <div class="container">
        <h2>Customer Information</h2>
        <table>
            <thead>
                <tr>
                    <th>User ID</th>
                    <th>Customer ID</th>
                    <th>First Name</th>
                    <th>Last Name</th>
                    <th>Email</th>
                    <th>Phone Number</th>
                    <th>Address</th>
                    <th>City</th>
                    <th>State</th>
                    <th>Postal Code</th>
                    <th>Country</th>
                </tr>
            </thead>
            <tbody>
                {{#each customerInfo}}
                <tr>
                    <td>{{this.username}}</td>
                    <td>{{this.customerId}}</td>
                    <td>{{this.firstName}}</td>
                    <td>{{this.lastName}}</td>
                    <td>{{this.email}}</td>
                    <td>{{this.phoneNum}}</td>
                    <td>{{this.address}}</td>
                    <td>{{this.city}}</td>
                    <td>{{this.state}}</td>
                    <td>{{this.postalCode}}</td>
                    <td>{{this.country}}</td>
                </tr>
                {{/each}}
            </tbody>
        </table>
    </div>

    <div class="admin-actions">
        {{!-- to show that the product has been updated/deleted/added --}}
        {{#if successMessage}}
            <div class="decorative-button">
                {{successMessage}}
            </div>
        {{/if}}

        {{!-- to update products --}}
        <div class="all-actions">
            <div class="container">
                <h2>Update Product</h2>
                
                <form class="admin-form" action="/admin/updateProduct" method="POST">
                    <label>
                        <input type="number" name="productId" placeholder="" required>
                        <span>Product ID</span>
                    </label>

                    <label>
                        <input type="text" name="productName" placeholder="">
                        <span>Product Name</span>
                    </label>
                    
                    <label>
                        <input type="text" name="productPrice" placeholder="">
                        <span>Price</span>
                    </label>

                    <label>
                        <textarea type="text" name="productDesc" placeholder="Description"></textarea>
                    </label>

                    <label>
                        <input type="password" name="adminPassword" placeholder="ADMIN PASSWORD" required>
                    </label>

                    <input class="custom-button" type="submit" value="Update Product">
                </form>
            </div>

            {{!-- to delete products --}}
            <div class="container">
                <h2>Delete Product</h2>

                <form class="admin-form" action="/admin/deleteProduct" method="POST">
                    <label>
                        <input type="number" name="productId" placeholder="" required>
                        <span>Product ID</span>
                    </label>

                    <label>
                        <input type="password" name="adminPassword" placeholder="ADMIN PASSWORD" required>
                    </label>

                    <div class="action">
                        <input class="custom-button" type="submit" value="Delete Product">
                    </div>
                </form>
            </div>

            {{!-- to add a new product --}}
            <div class="container">
                <h2>Add Product</h2>

                <form class="admin-form" action="/admin/addProduct" method="POST">
                    <label>
                        <input type="text" name="productName" placeholder="">
                        <span>Product Name</span>
                    </label>

                    <label>
                        <input type="text" name="productPrice" placeholder="">
                        <span>Price</span>
                    </label>

                    <label>
                        <input type="number" name="categoryId" placeholder="">
                        <span>Category ID</span>
                    </label>

                    <label>
                        <textarea type="text" name="productDesc" placeholder="Description"></textarea>
                    </label>

                    <label>
                        <input type="password" name="adminPassword" placeholder="ADMIN PASSWORD" required>
                    </label>

                    <div class="action">
                        <input class="custom-button" type="submit" value="Add Product">
                    </div>
                </form>
            </div>
        </div>

    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
    const orders = JSON.parse('{{{orders}}}');
    const ctx = document.getElementById('salesReportChart').getContext('2d');

    // Function to filter orders based on time range
    const filterOrdersByTimeRange = (timeRange) => {
        const now = new Date();
        return orders.filter(order => {
            const orderDate = new Date(order.orderDate);

            if (timeRange === '3-months') {
                const threeMonthsAgo = new Date();
                threeMonthsAgo.setMonth(now.getMonth() - 3);
                return orderDate >= threeMonthsAgo;
            }

            if (timeRange === '1-year') {
                const oneYearAgo = new Date();
                oneYearAgo.setFullYear(now.getFullYear() - 1);
                return orderDate >= oneYearAgo;
            }

            return true; // "All Time" returns all orders
        });
    };

    // Initial chart data and instance
    const chartData = {
        labels: orders.map(order => order.orderDate),
        datasets: [{
            label: 'Revenue',
            data: orders.map(order => order.sumTotal),
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.2)',
            borderWidth: 2,
            fill: true,
            tension: 0.1
        }]
    };

    const chart = new Chart(ctx, {
        type: 'line',
        data: chartData,
        options: {
            responsive: true,
            plugins: {
                legend: { display: false },
                tooltip: {
                    backgroundColor: 'rgba(0, 0, 0, 0.7)',
                    bodyColor: '#fff',
                    callbacks: {
                        label: function(tooltipItem) {
                            const revenue = tooltipItem.raw;
                            const productsSold = orders[tooltipItem.dataIndex].productsSold;
                            return `$${revenue.toLocaleString()} | Products Sold: ${productsSold}`;
                        }
                    },
                    displayColors: false
                }
            },
            scales: {
                x: { title: { display: true } },
                y: {
                    title: { display: true },
                    beginAtZero: false, // Auto-scale the y-axis without forcing it to start from zero
                    ticks: {
                        callback: function(value) {
                            return '$' + value.toLocaleString();
                        }
                    }
                }
            }
        }
    });

    // Function to update the chart
    const updateChart = (filteredOrders) => {
        chart.data.labels = filteredOrders.map(order => order.orderDate);
        chart.data.datasets[0].data = filteredOrders.map(order => order.sumTotal);

        // Let Chart.js auto-scale the min/max values
        chart.options.scales.y.min = undefined;  // Remove any manual minimum value
        chart.options.scales.y.max = undefined;  // Remove any manual maximum value

        chart.update();
    };

    // Button event listeners for dynamically updating chart
    document.getElementById('filter-3-months').addEventListener('click', () => {
        const filteredOrders = filterOrdersByTimeRange('3-months');
        updateChart(filteredOrders);
    });

    document.getElementById('filter-1-year').addEventListener('click', () => {
        const filteredOrders = filterOrdersByTimeRange('1-year');
        updateChart(filteredOrders);
    });

    document.getElementById('filter-all-time').addEventListener('click', () => {
        const filteredOrders = filterOrdersByTimeRange('all-time');
        updateChart(filteredOrders);
    });
</script>

{{!-- to remember scroll position after refresh --}}
<script>
    // Save the scroll position in localStorage before the page reloads
    window.addEventListener('beforeunload', () => {
        localStorage.setItem('scrollPosition', window.scrollY);
    });

    // Restore the scroll position after the page loads
    window.addEventListener('load', () => {
        const scrollPosition = localStorage.getItem('scrollPosition');
        if (scrollPosition) {
            window.scrollTo(0, parseInt(scrollPosition, 10));
            localStorage.removeItem('scrollPosition'); // Clean up
        }
    });
</script>